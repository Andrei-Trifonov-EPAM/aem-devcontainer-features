#!/usr/bin/env bash

source "${AEM_UES_FEATURE_DIR}/options.sh"

function ues_zip_not_found()
{
    cat <<EOM
AEM Universal Editor Service zip not found.
  uesDownloadsDirectory: '${AEM_UES_DOWNLOADS_DIR:-empty}'
  uesVersion: '${AEM_UES_VERSION}'
EOM
exit 42
}

function get_ues_zip()
{
    local searchdir="${AEM_UES_DOWNLOADS_DIR}"
    [ ! -d ${searchdir} ] && return 1

    local zip="${searchdir}/universal-editor-service-vprod-${AEM_UES_VERSION}.zip"
    if [ "${AEM_UES_VERSION}" = "automatic" ]; then
        zip="$(find ${searchdir} -maxdepth 1 -iname 'universal-editor-service-vprod-*.zip' -type f | sort -V | tail -n1)"
    fi

    [ ! -f "${zip}" ] && return 1 || echo "${zip}"
}

cd ${AEM_UES_FEATURE_DIR}

# Install the content package that contains OSGi configs if not installed
# AEM_SDK_FEATURE_DIR is defined by the aem-sdk feature
if [ -d "${AEM_SDK_FEATURE_DIR}" ]; then
    installDir="${AEM_SDK_FEATURE_DIR}/author/crx-quickstart/install"
    if [ ! -f "${installDir}/aem-universal-editor-service.ui.config-1.0.0.zip" ]; then
        mkdir -p "${installDir}"
        cp "${AEM_UES_FEATURE_DIR}/aem-universal-editor-service.ui.config-1.0.0.zip" "${installDir}"
    fi
fi

# Install UES if not installed
if [ ! -f universal-editor-service.cjs ]; then
    ueszip=$(get_ues_zip) || ues_zip_not_found
    sudo unzip ${ueszip}
fi

# Source node version manager
source ${NVM_DIR}/nvm.sh

# Install node version
nvm install ${AEM_UES_NODE_VERSION}
# And required global packages
nvm exec ${AEM_UES_NODE_VERSION} \
    npm install -g local-ssl-proxy concurrently

# Run TLS termination for UES and Author
nvm exec ${AEM_UES_NODE_VERSION} \
    concurrently --kill-others \
        "node universal-editor-service.cjs" \
        "local-ssl-proxy --source ${AEM_UES_HTTPS_PORT} --target ${AEM_UES_HTTP_PORT}" \
        "local-ssl-proxy --source ${AEM_UES_AUTHOR_HTTPS_PORT} --target ${AEM_UES_AUTHOR_HTTP_PORT}"
